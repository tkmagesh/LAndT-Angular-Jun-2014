@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Task Manager</title>
	<style type="text/css">
		.completed {
			color : red;
			text-decoration: line-through;
			font-style: italic;
		}
	</style>
	<script src="/public/scripts/angular.min.js"></script>
	<script>
	
	angular
		.module('myApp',[])
		.factory('Task',function(){
			/*Task Constructor Function*/
			function Task(taskData){
				this.id = taskData.id;
				this.name = taskData.name;
				this.isCompleted = taskData.isCompleted;
			};
			Task.prototype.toggleCompletion = function(){
				this.isCompleted = !this.isCompleted;
			}
			/********************************/
			return Task;
		})
		/*.service('taskStorage',['Task','$window',function TaskStorage(Task,$window){
			this.getAll = function(){
				var result = [];
				for(var i=0;i<$window.localStorage.length;i++){
					var key = $window.localStorage.key(i);
					var task = new Task(JSON.parse($window.localStorage.getItem(key)));
					result.push(task);
				}	
				return result;
			};
			this.add = function(taskName){
				var newTask = new Task({id : new Date().getTime().toString(), name : taskName, isCompleted : false});
				$window.localStorage.setItem(newTask.id, $window.JSON.stringify(newTask));
				return newTask;
			};
			this.update = function(task){
				var taskFromStorage = JSON.parse($window.localStorage.getItem(task.id));
				taskFromStorage.name = task.name;
				taskFromStorage.isCompleted = task.isCompleted;
				$window.localStorage.setItem(taskFromStorage.id, $window.JSON.stringify(taskFromStorage));
			};
			this.remove = function(taskId){
				$window.localStorage.removeItem(taskId);
			};
		}])*/
        .service('taskService', function TaskService($http, $q, Task) {
            this.getAll = function () {
                var deferred = $q.defer();

                var promise = $http({ method: "get", url: "/Home/Tasks" });
                promise.success(function (data) {
                    deferred.resolve(data.map(function (d) { return new Task(d); }));
                });
                return deferred.promise;
            };
            this.add = function (taskName) {
                return $http({ method: "post", url: "/Home/Add", data: { taskName: taskName } });
            }
        })
		.controller('taskController',function taskController($scope,Task,taskService){
		    var items = [];
		    var p = taskService.getAll().then(function (data) {
		        items = data;
		    });

			var tasks = {};
			tasks.addTask = function(taskName){
			    taskService.add(taskName).success(function(data) {
			        items.push(new Task(data));
			    });;
			}
			
			tasks.getTasks = function(){
				return items;
			}
			tasks.toggleCompletion = function(task){
				task.toggleCompletion();
				//taskStorage.update(task);
			};
			
			tasks.getCompletedTaskCount = function () {
			    console.log(items);
				return items.reduce(function(seed,task){
					return task.isCompleted ? ++seed : seed;
				},0);
			};
			tasks.removeCompleted = function(){
				console.log(items);
				for(var i=items.length-1;i>=0;i--){
					if (items[i].isCompleted){
						var removedItems = items.splice(i,1);
						taskStorage.remove(removedItems[0].id);
					}
				}
			}
			
			$scope.tasks = tasks;
		})
		.filter('trimName',function(){
			return function(value,trimLength){
				return value.length > trimLength ? value.substr(0,trimLength) + "..." : value;
			}
		});

	</script>
</head>
<body ng-app="myApp" data-ng-controller="taskController">
	<h1>Task Manager</h1>
	<div>Search : <input type="text" data-ng-model="searchTerm.name"></div>
	<div>Task Name Length Limit : 
		<select data-ng-model="taskNameLength">
			<option value="10">10</option>
			<option value="20">20</option>
			<option value="30">30</option>
			<option value="40">40</option>
		</select>
	</div>
	<hr>
	<span>Task :</span>
	<input type="text" data-ng-model="newTask">
	<input type="button" value="Add Task" data-ng-click="tasks.addTask(newTask)">
	<input type="button" name="" id="" value="Remove Completed" data-ng-click="tasks.removeCompleted()">
	<ol>
		<li data-ng-repeat="item in tasks.getTasks() | filter:searchTerm" data-ng-click="tasks.toggleCompletion(item)" data-ng-class="{completed : item.isCompleted}">{{item.name | trimName:taskNameLength}}</li>
	</ol>
	<div>
		<div>Total #: {{tasks.getTasks().length}}</div>
		<div>Completed #: {{tasks.getCompletedTaskCount()}}</div>
	</div>
</body>
</html>